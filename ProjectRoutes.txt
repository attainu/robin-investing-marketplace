HomeRoutes ---------------------------------------------------------------------

1)  Getting data on all the available coins -
    route - '/CurrencyExchange'
    type - GET
    body parameters - None
    expected response - json array with coin objects.

    Note - This is not a protected route. Anyone who visits the app can casually
           check the currenct exchange prices using the provided data on coins.




UserRoutes ---------------------------------------------------------------------
1) User registration -
  route - '/register'
  type - POST
  body parameters - {
                    "name": "name of the user",
                    "email": "email of the user",
                    password: "password",
                    "phoneNUmber": 10 digit phone number,
                    "dob": date of birth in (yyyy-mm-dd) format,
                    "gender": "male, female or other",
                    "address": "string containing address"
                    }

2) User Login -
  route - '/login'
  type - POST
  body parameters - {
                    "email": "email of the registered user",
                    "password": "password"
                    }

3) Change Password - (protected route)
  route - '/changepassword'
  type - POST
  body parameters - {
                    "email": "email of the user",
                    "oldPassword": "old password",
                    "newPassword": "new password"
                    }

4) Delete Account - (protected route)
  route - '/deleteaccount'
  type - POST
  body parameters - {
                    "email": "email of the user"
                    }

5) User Logout - (protected route)
  route - '/logout'
  type - DELETE
  body parameters - None

6) User Profile - (protected route)
  route - '/userprofile'
  type - GET
  body parameters - None

7) User Password Reset -
  route - '/resetpassword'
  type - POST
  headers - "token": "resetToken"
  body parameters - {
                    "email": "email of the registered user",
                    "password": "password"
                    }



Email Verificaton routes--------------------------------------------------------

1) Confirm Email  -  (sent via mail)
  route - '/confirm/:confirmToken'
  type - GET
  body parameters - None


2) Resend email with new token -
  route - '/regenerate'
  type - POST
  body parameters - {
                    "email": "email of the user"
                    }

3) Regenerated Email with new token - (sent via email)
  route - '/reset/:resetToken'
  type - GET
  body parameters - None


4) Forgot password -
  route - '/forgotpassword'
  type - POST
  body parameters - {
                    "email": "email of the user"
                    }



Mutual Funds Routes-------------------------------------------------------------

1) Finding all MF scheme with a limit -
  route - '/mutualFunds/:number'
  type - GET
  body parameters - None
  expected response - json array with mutualFunds objects.

2) Funding a mutual fund with a particular scheme ID -
  route - '/mutualFundsBySchemeId'
  type - GET
  query parameters - "SchemeCode": "scheme id of the MF scheme"
  expected response - json object with details about MF scheme with provided scheme Id.

3) Finding mutual funds with custom search -
  route - '/mutualFundsCustom'
  type - GET
  body parameters - {
                    "Mutual_Funds_Family": "family filter for schemes",
                    "Scheme_Category": "scheme category filter for schemes",
                    "Scheme_Name": "scheme name filter for schemes",
                    "Scheme_Type": "scheme type filter for schemes",
                    "Scheme_Code": "scheme code filter for schemes",
                    "numberOfResults": "number of results that are required"
                    }
  expected response - json array with MF schemes objects.

4) Perform Transaction to invest in a particular sceheme - (protected route)
  route - '/saveaddtrans'
  type - POST
  body parameters - {
                      "schemeCode": "valid mutual funds scheme Id",
                      "boOfUnits": "quantity of units you want to buy",
                      "typeOfTransaction": "Buy or Sell"
                      }
  expected response - json array with mutualFunds hldings related to the logged in user.

5) Showing user mutual funds holdings - (protected route)
  route - '/MutualFundHoldings'
  type - GET
  body parameters - None
  expected response - json array with mutualFunds hldings related to the logged in user.

6) Showing transations performed by the user - (protected route)
  route - '/MutualFundTransactions'
  type - GET
  body parameters - None
  expected response - json object showing the successful transaction details.




CurrencyExRoutes----------------------------------------------------------------

1) Getting data on all the available coins -
    route - '/CurrencyExchange'
    type - GET
    body parameters - None
    expected response - json array with coin objects.

2) Getting data on a specific coin -
    route - '/CurrencyExchange/:coinId'
    type - GET
    body parameters - None
    expected response - json object with the details about coin with coin_id provided as params.

3) Getting data for a transaction between a particular coin and the base currency used in the app(USD) -
    route - '/CurrencyExchange/transaction/:coinId'
    type - GET
    body parameters - None
    expected response - json array containing objects with the details about coin
                        with coin_id provided as params and another object  containing
                        details about base currency(USD).

4) Performing a transaction between a particular coin and the base currency(USD) -
    route - '/CurrencyExchange/transaction/:coinId'
    type - POST
    body parameters - {
                        "BaseCurr": "<coinId of the base currency>",
                        "ExCurr": "coinId of the currency you are trying to buy",
                        "BaseAmt": amount of base currency you will be spending,
                        "ExAmt": amount of new currency you will be getting,
                        "Type": "type of transaction with respect to the base currency",
                        "Category": "category of transaction"
                        }
    expected response - json object with updated wallet details.
                        also adds a new transaction to record the exchange.

    Note - BaseAmt and ExAmt are being calculated with the help of the coin details provided in the response of the GET route mentioned above.
           All the above routes are protected routes. Session based authentication is being used to verify the user.




WalletRoutes--------------------------------------------------------------------

1) Getting data on the wallet related to the logged in user -
    route - '/wallet'
    type - GET
    body parameters - None
    expected response - json object showing the wallet object related to the logged in user

2) Getting the details for adding funds to the wallet -
    route - '/wallet/addFunds'
    type - GET
    body parameters - None
    expected response - json object showing the object with coin details of base currency(USD).

3) Adding funds to the wallet -
    route - '/wallet/addFunds'
    type - POST
    body parameters - {
                      "BaseCurr": "coinId of the base currency(USD)",
                      "BaseAmt": amount to be added as funds to the wallet,
                      "Type": "type of transation with respect to the base currency",
                      "Category": "category of transaction"
                      }
    expected response - json object with updated wallet details.
                        also adds a new transaction to record the exchange.

4) Adding a new wallet for the user without an existing wallets -
    route - '/wallet/addWallet'
    type - POST
    body parameters - {

                      }
    expected response - json object showing the object with coin details of base currency(USD).
